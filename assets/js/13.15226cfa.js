(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{158:function(t,n,a){t.exports=a.p+"assets/img/fea7461e85aee80bbe96.b6b377ba.png"},184:function(t,n,a){"use strict";a.r(n);var s=[function(){var t=this.$createElement,n=this._self._c||t;return n("p",[n("img",{attrs:{src:a(158),alt:"An image"}})])},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ul",[a("li",[t._v("Workspace:工作区\n"),a("ul",[a("li",[t._v("执行git add *命令就把改动提交到了暂存区")]),t._v(" "),a("li",[t._v("执行git pull命令将远程仓库的数据拉到当前分支并合并")]),t._v(" "),a("li",[t._v("执行git checkout [branch-name]切换分支")])])]),t._v(" "),a("li",[t._v("Index:暂存区\n"),a("ul",[a("li",[t._v("执行git commit -m '说明' 命令就把改动提交到了仓库区（当前分支）")])])]),t._v(" "),a("li",[t._v("Repository:仓库区（或本地仓库）\n"),a("ul",[a("li",[t._v("执行git push origin master提交到远程仓库")]),t._v(" "),a("li",[t._v("执行git clone 地址将克隆远程仓库到本地")])])]),t._v(" "),a("li",[t._v("Remote:远程仓库，就是类似github，coding等网站所提供的仓库")])])},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("忽略某文件\nnpm"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("debug"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log\n忽略文件夹\ndist"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\nnode_modules"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("idea"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("\n")])])])},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("# 显示当前的Git配置\n$ git config "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("list\n# 编辑Git配置文件，只是配置用户信息的话直接看下面两行命令即可\n$ git config "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("e "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("global"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n# 设置提交代码时的用户信息，是否加上全局"),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("global自行决定，一般是直接设置全局的。另外用户邮箱需要注意最好使用gmail"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token constant"}},[t._v("QQ")]),t._v("也可以，需要和你远程仓库保持一致不然你的contribution是不会被记录在远程仓库的\n$ git config "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("global"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" user"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{attrs:{class:"token string"}},[t._v('"[name]"')]),t._v("\n$ git config "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("global"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" user"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("email "),a("span",{attrs:{class:"token string"}},[t._v('"[email address]"')]),t._v("\n")])])])},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// [*.{js,jsx,ts,tsx,vue}]表示只配置js,jsx,ts,tsx,vue,*表示全部")]),t._v("\nroot "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token operator"}},[t._v("*")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\ncharset "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" utf"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("8")]),t._v("\nindent_style "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" space\nindent_size "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v("\nend_of_line "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" lf\ninsert_final_newline "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\ntrim_trailing_whitespace "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n")])])])},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("# 在当前目录创建一个文件夹\n$ mkdir "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("project"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 在当前目录新建一个Git代码库 \n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n$ git init "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("project"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 下载一个项目和它的整个代码历史（各个分支提交记录等）\n$ git clone "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("url"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("# 添加当前目录的所有文件到暂存区\n$ git add "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n# 提交暂存区到仓库区\n$ git commit "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("message"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 为远程Git更名为origin\n$ git remote add origin git@github"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("abcd"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("tmp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git\n\n# 推送此次修改，这是首次推送需要加上"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("u"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("之后推送就可以直接git push  origin master"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("origin是远程Git名字，这个可以自己定义，不过一般是用origin罢了，master是默认的分支，如果不在master分支提交需要写清楚分支名称\n$ git push "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("u origin master\n\n# 强制推送\n$ git push "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("u origin master "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("f\n")])])])},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("# 添加指定文件到暂存区\n$ git add "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file1"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file2"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("\n\n# 添加指定目录到暂存区，包括子目录\n$ git add "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("dir"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 添加当前目录的所有文件到暂存区\n$ git add "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v("\n\n# 添加每个变化前，都会要求确认对于同一个文件的多处变化，可以实现分次提交\n$ git add "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n$ git rm "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file1"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file2"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("\n\n# 停止追踪指定文件，但该文件会保留在工作区\n$ git rm "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("cached "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 改名文件，并且将这个改名放入暂存区\n$ git mv "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("original"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("renamed"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 提交暂存区到仓库区\n$ git commit "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("message"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 提交暂存区的指定文件到仓库区\n$ git commit "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file1"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file2"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("message"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n$ git commit "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("a\n\n# 提交时显示所有diff信息\n$ git commit "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("v\n\n# 使用一次新的commit，替代上一次提交如果代码没有任何新变化，则用来改写上一次commit的提交信息\n$ git commit "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("amend "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("m "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("message"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 重做上一次commit，并包括指定文件的新变化\n$ git commit "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("amend "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file1"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file2"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("\n\n# 提交更改到远程仓库\n$ git push origin master\n\n# 拉取远程更改到本地仓库默认自动合并\n$ git pull origin master\n\n")])])])},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("# "),a("span",{attrs:{class:"token function"}},[t._v("列出所有本地分支")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("查看当前在哪个分支"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n$ git branch\n\n# 列出所有远程分支\n$ git branch "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("r\n\n# 列出所有本地分支和远程分支信息\n$ git branch "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("a\n\n# 新建一个分支，但依然停留在当前分支\n$ git branch "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 新建一个分支，指向指定commit\n$ git branch "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commit"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n$ git branch "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("track "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("remote"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("branch"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 切换到指定分支，并更新工作区\n$ git checkout "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 新建一个分支，并切换到该分支\n$ git checkout "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("b "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 切换到上一个分支\n$ git checkout "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n$ git branch "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("upstream "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("remote"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("branch"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 合并指定分支到当前分支，如果有冲突需要手动合并冲突（就是手动编辑文件保存咯），然后add"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("commit再提交\n$ git merge "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 选择一个commit，合并进当前分支\n$ git cherry"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("pick "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commit"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 删除分支\n$ git branch "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("d "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 删除远程分支\n$ git push origin "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),a("span",{attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n$ git branch "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("dr "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("remote"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("branch"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n")])])])},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("# 列出所有tag\n$ git tag\n\n# 新建一个tag在当前commit\n$ git tag "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 新建一个tag在指定commit\n$ git tag "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commit"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 删除本地tag\n$ git tag "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("d "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 删除远程tag\n$ git push origin "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("refs"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("tags"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 查看tag信息\n$ git show "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 提交指定tag\n$ git push "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("remote"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 提交所有tag\n$ git push "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("remote"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("tags\n\n# 新建一个分支，指向某个tag\n$ git checkout "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("b "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n")])])])},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("# 恢复暂存区的指定文件到工作区\n$ git checkout "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 恢复某个commit的指定文件到暂存区和工作区\n$ git checkout "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commit"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 恢复暂存区的所有文件到工作区\n$ git checkout "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n# 回退到上一个版本，在Git中，用"),a("span",{attrs:{class:"token constant"}},[t._v("HEAD")]),t._v("表示当前版本\n$ git reset "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("hard "),a("span",{attrs:{class:"token constant"}},[t._v("HEAD")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),t._v("\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n$ git reset "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 重置暂存区与工作区，与上一次commit保持一致\n$ git reset "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n$ git reset "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commit"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 重置当前分支的"),a("span",{attrs:{class:"token constant"}},[t._v("HEAD")]),t._v("为指定commit，同时重置暂存区和工作区，与指定commit一致\n$ git reset "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("hard "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commit"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 重置当前"),a("span",{attrs:{class:"token constant"}},[t._v("HEAD")]),t._v("为指定commit，但保持暂存区和工作区不变\n$ git reset "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("keep "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commit"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 新建一个commit，用来撤销指定commit\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n$ git revert "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commit"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 撤回上上次提交，数字从"),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("开始\n$ git revert "),a("span",{attrs:{class:"token constant"}},[t._v("HEAD")]),a("span",{attrs:{class:"token operator"}},[t._v("~")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n\n# → 撤销指定的commit（👍）\n$ git revert "),a("span",{attrs:{class:"token constant"}},[t._v("HEAD")]),t._v(" \n\n# 直接将commit从历史记录中直接删除\n$ git rebase "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("onto\n\n# 暂时将未提交的变化移除，稍后再移入\n$ git stash\n$ git stash pop\n")])])])},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("# 显示当前每条分支的合并历史\n$ git log\n–oneline –graph：可以图形化表示分支合并历史\n–author"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("author name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("：指定作者提交历史\n\n# 显示commit历史，以及每次commit发生变更的文件\n$ git log "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("stat\n\n# 搜索提交历史，根据关键词\n$ git log "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token constant"}},[t._v("S")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("keyword"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n$ git log "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("HEAD")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("pretty"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("format"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token operator"}},[t._v("%")]),t._v("s\n\n# 显示某个commit之后的所有变动，其"),a("span",{attrs:{class:"token string"}},[t._v('"提交说明"')]),t._v("必须符合搜索条件\n$ git log "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("HEAD")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n$ git log "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("follow "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n$ git whatchanged "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 显示指定文件相关的每一次diff\n$ git log "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("p "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 显示过去"),a("span",{attrs:{class:"token number"}},[t._v("5")]),t._v("次提交\n$ git log "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("pretty "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("oneline\n\n# 显示所有提交过的用户，按提交次数排序\n$ git shortlog "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("sn\n\n# 显示指定文件是什么人在什么时间修改过\n$ git blame "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 显示暂存区和工作区的差异\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n$ git diff "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("cached "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 显示工作区与当前分支最新commit之间的差异\n$ git diff "),a("span",{attrs:{class:"token constant"}},[t._v("HEAD")]),t._v("\n\n# 显示两次提交之间的差异\n$ git diff "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("first"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("branch"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token operator"}},[t._v("...")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("second"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("branch"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 显示今天你写了多少行代码\n$ git diff "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("shortstat "),a("span",{attrs:{class:"token string"}},[t._v('"@{0 day ago}"')]),t._v("\n\n# 显示某次提交的元数据和内容变化\n$ git show "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commit"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 显示某次提交发生变化的文件\n$ git show "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("name"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("only "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commit"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 显示某次提交时，某个文件的内容\n$ git show "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commit"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("filename"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n")])])])},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("# git blame清楚的记录某个文件的更改历史和更改人，简直是查看背锅人的利器，filepath是需要查看的文件路径\n$ git blame filepath\n\n# 显示有变更的文件\n$ git status "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("s：查询repo的状态"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("s表示short"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("输出标记有两列"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("第一列是对staging区域"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("第二列是working目录\n\n# 显示当前分支的最近几次提交\n$ git reflog\n\n# 强制覆盖本地代码\n$ git fetch "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("all\n$ git reset "),a("span",{attrs:{class:"token operator"}},[t._v("--")]),t._v("hard origin"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("master\n$ git pull\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 不属于git命令，但在项目中可以用到")]),t._v("\n\n# 打开文件名\ncat "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("file"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# "),a("span",{attrs:{class:"token function"}},[t._v("创建一个新的文件")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("两种方式"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("、touch index"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("html")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("直接新建一个文件"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v("、vi"),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("文件名，新建一个文件并进入编辑状态（如果文件已存在，则直接进入编辑状态）\n\n# 删除文件、文件夹\nrm "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v("rf "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("文件名"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 显示当前工作目录的路径\npwd \n\n# 进入某个目录\ncd "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("目录名"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n# 返回上一级目录\ncd "),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n# 创建文件夹（即文件目录）\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 在cmd下，新建文件夹命令是 md+文件夹名, md在git bash下是无效的命令。")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 在git bash 新建文件夹命令是 mkdir+文件夹名")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 原因是cmd和git bash是两个完全不同的工具，cmd用的是Windows自己的命令，而git bash用的是linux下的命令。")]),t._v("\nmkdir "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("文件夹名字"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n")])])])}],o=a(0),e=Object(o.a)({},function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("div",{staticClass:"content"},[a("h4",[t._v("1.1 Git工作原理")]),t._v(" "),t._m(0),t._v(" "),t._m(1),t._v(" "),a("h4",[t._v("1.2 忽略特定的文件")]),t._v(" "),a("p",[t._v("可以配置Git忽略特定的文件或者是文件夹。这些配置都放在.gitignore文件中。这个文件可以存在于不同的文件夹中，可以包含不同的文件匹配模式。\n比如.gitignore内容可以如下：")]),t._v(" "),t._m(2),a("h4",[t._v("1.3 使用.gitkeep来追踪空的文件夹")]),t._v(" "),a("p",[t._v("Git会忽略空的文件夹。如果你想版本控制包括空文件夹，根据惯例会在空文件夹下放置.gitkeep文件。其实对文件名没有特定的要求。一旦一个空文件夹下有文件后，这个文件夹就会在版本控制范围内。")]),t._v(" "),a("h4",[t._v("1.4 配置")]),t._v(" "),t._m(3),a("h5",[t._v("14.1 .editorconfig文件配置")]),t._v(" "),t._m(4),a("h4",[t._v("1.5 Git安装")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://git-scm.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("安装地址"),a("OutboundLink")],1)]),t._v(" "),a("h4",[t._v("1.6 创建仓库")]),t._v(" "),t._m(5),a("p",[t._v("提示：git init后会出现.git文件夹，里面有配置文件，如果没有git bash里面输入ls -lah就可以看到了")]),t._v(" "),a("h4",[t._v("1.7 提交文件--首次推送")]),t._v(" "),t._m(6),a("p",[t._v("首次推送成功后可以看下下面的命令：")]),t._v(" "),t._m(7),a("h4",[t._v("1.8 分支")]),t._v(" "),a("p",[t._v("但如果是多人协作的话，git的魅力就开始提现出来了，每个人有自己的一个分支，各自在自己的分支上工作互不干扰。")]),t._v(" "),a("p",[t._v("具体的看这："),a("a",{attrs:{href:"https://www.liaoxuefeng.com/wiki/896043488029600/900003767775424",target:"_blank",rel:"noopener noreferrer"}},[t._v("点击查看"),a("OutboundLink")],1)]),t._v(" "),t._m(8),a("h4",[t._v("1.9 标签")]),t._v(" "),a("p",[t._v("标签的作用主要是用来做版本回退的，关于版本回退，这也是Git的亮点之一，起到了后悔药的功能·")]),t._v(" "),t._m(9),a("h4",[t._v("2.0 后悔药")]),t._v(" "),a("p",[t._v("想一下在你写完N个文件代码后，commit到了本地仓库，突然发现整个应用崩溃了！咋整？Git给了我们吃后悔药的机会：")]),t._v(" "),t._m(10),a("p",[t._v("这个时候标签的作用就体现出来了，因为commit号太冗长了，记起来太麻烦有了标签我们相当于自定义了commit号")]),t._v(" "),a("h4",[t._v("2.1 文件信息")]),t._v(" "),t._m(11),a("h4",[t._v("2.2 其他命令")]),t._v(" "),t._m(12),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.im/post/582bd0b4da2f600063d4f89e",target:"_blank",rel:"noopener noreferrer"}},[t._v("文档来源"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5a2cdfe26fb9a0452936b07f",target:"_blank",rel:"noopener noreferrer"}},[t._v("拓展学习"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/entry/59b22efb6fb9a024a04b3726",target:"_blank",rel:"noopener noreferrer"}},[t._v("值得学习"),a("OutboundLink")],1)])])])},s,!1,null,null,null);e.options.__file="README.md";n.default=e.exports}}]);